=== Running /home/alrezni/src/cntk_git/build/release/bin/cntk configFile=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/cntk.cntk currentDirectory=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E RunDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu DataDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E OutputDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu DeviceId=-1 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Apr 18 2016 16:16:45
		Last modified date: Tue Apr  5 16:01:37 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: alrezni/examples_text
		Build SHA1: 3f7e6e78467f3e03a6cbd014c30e36a5711575df (modified)
		Built by alrezni on atleneu04
		Build Path: /home/alrezni/src/cntk_git
-------------------------------------------------------------------
Changed current directory to /home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
04/19/2016 09:07:36: -------------------------------------------------------------------
04/19/2016 09:07:36: Build info: 

04/19/2016 09:07:36: 		Built time: Apr 18 2016 16:16:45
04/19/2016 09:07:36: 		Last modified date: Tue Apr  5 16:01:37 2016
04/19/2016 09:07:36: 		Build type: release
04/19/2016 09:07:36: 		Build target: GPU
04/19/2016 09:07:36: 		With 1bit-SGD: no
04/19/2016 09:07:36: 		Math lib: acml
04/19/2016 09:07:36: 		CUDA_PATH: /usr/local/cuda-7.0
04/19/2016 09:07:36: 		CUB_PATH: /usr/local/cub-1.4.1
04/19/2016 09:07:36: 		CUDNN_PATH: /usr/local/cudnn-4.0
04/19/2016 09:07:36: 		Build Branch: alrezni/examples_text
04/19/2016 09:07:36: 		Build SHA1: 3f7e6e78467f3e03a6cbd014c30e36a5711575df (modified)
04/19/2016 09:07:36: 		Built by alrezni on atleneu04
04/19/2016 09:07:36: 		Build Path: /home/alrezni/src/cntk_git
04/19/2016 09:07:36: -------------------------------------------------------------------

04/19/2016 09:07:36: Running on localhost at 2016/04/19 09:07:36
04/19/2016 09:07:36: Command line: 
/home/alrezni/src/cntk_git/build/release/bin/cntk  configFile=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/cntk.cntk  currentDirectory=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E  RunDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu  DataDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E  ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E  OutputDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu  DeviceId=-1  timestamping=true



04/19/2016 09:07:36: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/19/2016 09:07:36: precision = "float"
command = train:test
deviceId = $DeviceId$
ndlMacros = "$ConfigDir$/Macros.ndl"
parallelTrain = false
numCPUThreads = 8
train = [
    action = "train"
    modelPath = "$RunDir$/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=false)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = Plus(conv, convB);
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            t = Times(W, x)
            z = Plus(t, b)
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            t = Times(W, x)
            out = Plus(t, b)
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, 25, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, 400, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
        outputNodes = ol
    ]
    SGD = [
        epochSize = 100
        minibatchSize = 10
        learningRatesPerMB = 0.05
        momentumPerMB = 0*10:0.7
        maxEpochs = 12
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
		input = [
			features = [
				dim = 784
				format = "dense"
			]
			labels = [
				dim = 10
				format = "dense"
			]
		]
    ]    
]
test = [
    action = "test"
    modelPath = "$RunDir$/models/cntk.dnn"
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/Convolution.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
		input = [
			features = [
				dim = 784
				format = "dense"
			]
			labels = [
				dim = 10
				format = "dense"
			]
		]
    ]    
]
currentDirectory=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
RunDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu
DataDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
OutputDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu
DeviceId=-1
timestamping=true

04/19/2016 09:07:36: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/19/2016 09:07:36: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/19/2016 09:07:36: precision = "float"
command = train:test
deviceId = -1
ndlMacros = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Macros.ndl"
parallelTrain = false
numCPUThreads = 8
train = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=false)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = Plus(conv, convB);
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            t = Times(W, x)
            z = Plus(t, b)
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            t = Times(W, x)
            out = Plus(t, b)
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, 25, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, 400, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
        outputNodes = ol
    ]
    SGD = [
        epochSize = 100
        minibatchSize = 10
        learningRatesPerMB = 0.05
        momentumPerMB = 0*10:0.7
        maxEpochs = 12
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Train_cntk_text.txt"
		input = [
			features = [
				dim = 784
				format = "dense"
			]
			labels = [
				dim = 10
				format = "dense"
			]
		]
    ]    
]
test = [
    action = "test"
    modelPath = "/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn"
    NDLNetworkBuilder = [
        networkDescription = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Convolution.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Test_cntk_text.txt"
		input = [
			features = [
				dim = 784
				format = "dense"
			]
			labels = [
				dim = 10
				format = "dense"
			]
		]
    ]    
]
currentDirectory=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
RunDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu
DataDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
OutputDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu
DeviceId=-1
timestamping=true

04/19/2016 09:07:36: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/19/2016 09:07:36: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=train:test
configparameters: cntk.cntk:ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
configparameters: cntk.cntk:currentDirectory=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
configparameters: cntk.cntk:DataDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:ndlMacros=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Macros.ndl
configparameters: cntk.cntk:numCPUThreads=8
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu
configparameters: cntk.cntk:test=[
    action = "test"
    modelPath = "/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn"
    NDLNetworkBuilder = [
        networkDescription = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Convolution.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Test_cntk_text.txt"
		input = [
			features = [
				dim = 784
				format = "dense"
			]
			labels = [
				dim = 10
				format = "dense"
			]
		]
    ]    
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:train=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=false)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = Plus(conv, convB);
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            t = Times(W, x)
            z = Plus(t, b)
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            t = Times(W, x)
            out = Plus(t, b)
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, 25, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, 400, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
        outputNodes = ol
    ]
    SGD = [
        epochSize = 100
        minibatchSize = 10
        learningRatesPerMB = 0.05
        momentumPerMB = 0*10:0.7
        maxEpochs = 12
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Train_cntk_text.txt"
		input = [
			features = [
				dim = 784
				format = "dense"
			]
			labels = [
				dim = 10
				format = "dense"
			]
		]
    ]    
]

04/19/2016 09:07:36: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/19/2016 09:07:36: Commands: train test
04/19/2016 09:07:36: Precision = "float"
04/19/2016 09:07:36: Using 8 CPU threads.
04/19/2016 09:07:36: CNTKModelPath: /tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn
04/19/2016 09:07:36: CNTKCommandTrainInfo: train : 12
04/19/2016 09:07:36: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 12

04/19/2016 09:07:36: ##############################################################################
04/19/2016 09:07:36: #                                                                            #
04/19/2016 09:07:36: # Action "train"                                                             #
04/19/2016 09:07:36: #                                                                            #
04/19/2016 09:07:36: ##############################################################################

04/19/2016 09:07:36: CNTKCommandTrainBegin: train

04/19/2016 09:07:36: Creating virgin network.

Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 4 x 4 x 32]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [24 x 24 x 16 x *]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *], [1 x 1 x 16] -> [24 x 24 x 16 x *]
Validating --> conv1_act.out = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *] -> [24 x 24 x 16 x *]
Validating --> pool1 = MaxPooling (conv1_act.out) : [24 x 24 x 16 x *] -> [12 x 12 x 16 x *]
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *] -> [8 x 8 x 32 x *]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *], [1 x 1 x 32] -> [8 x 8 x 32 x *]
Validating --> conv2_act.out = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *] -> [8 x 8 x 32 x *]
Validating --> pool2 = AveragePooling (conv2_act.out) : [8 x 8 x 32 x *] -> [4 x 4 x 32 x *]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 4 x 4 x 32], [4 x 4 x 32 x *] -> [128 x *]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *], [128] -> [128 x *]
Validating --> h1.out = Sigmoid (h1.z) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.out) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.out = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


Using reference convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/19/2016 09:07:36: Created model with 27 nodes on CPU.

04/19/2016 09:07:36: Training criterion node(s):
04/19/2016 09:07:36: 	ce = CrossEntropyWithSoftmax

04/19/2016 09:07:36: Evaluation criterion node(s):

04/19/2016 09:07:36: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.
04/19/2016 09:07:36: No PreCompute nodes found, skipping PreCompute step.

04/19/2016 09:07:36: Starting Epoch 1: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/19/2016 09:07:36: Starting minibatch loop.
04/19/2016 09:07:37:  Epoch[ 1 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.38243378; EvalErr[0]PerSample = 0.90000000; TotalTime = 0.9536s; SamplesPerSecond = 104.9
04/19/2016 09:07:37: Finished Epoch[ 1 of 12]: [Training Set] TrainLossPerSample = 2.3824338; TotalSamplesSeen = 100; EvalErrPerSample = 0.9; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.954645
04/19/2016 09:07:37: SGD: Saving checkpoint model '/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn.1'

04/19/2016 09:07:37: Starting Epoch 2: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/19/2016 09:07:37: Starting minibatch loop.
04/19/2016 09:07:38:  Epoch[ 2 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.36501129; EvalErr[0]PerSample = 0.88000000; TotalTime = 1.1164s; SamplesPerSecond = 89.6
04/19/2016 09:07:38: Finished Epoch[ 2 of 12]: [Training Set] TrainLossPerSample = 2.3650113; TotalSamplesSeen = 200; EvalErrPerSample = 0.88; AvgLearningRatePerSample = 0.0049999999; EpochTime=1.11696
04/19/2016 09:07:38: SGD: Saving checkpoint model '/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn.2'

04/19/2016 09:07:38: Starting Epoch 3: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/19/2016 09:07:38: Starting minibatch loop.
04/19/2016 09:07:39:  Epoch[ 3 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.34714523; EvalErr[0]PerSample = 0.86000000; TotalTime = 0.8480s; SamplesPerSecond = 117.9
04/19/2016 09:07:39: Finished Epoch[ 3 of 12]: [Training Set] TrainLossPerSample = 2.3471452; TotalSamplesSeen = 300; EvalErrPerSample = 0.86; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.848216
04/19/2016 09:07:39: SGD: Saving checkpoint model '/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn.3'

04/19/2016 09:07:39: Starting Epoch 4: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/19/2016 09:07:39: Starting minibatch loop.
04/19/2016 09:07:40:  Epoch[ 4 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.40979538; EvalErr[0]PerSample = 0.88000000; TotalTime = 0.9061s; SamplesPerSecond = 110.4
04/19/2016 09:07:40: Finished Epoch[ 4 of 12]: [Training Set] TrainLossPerSample = 2.4097954; TotalSamplesSeen = 400; EvalErrPerSample = 0.88; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.906465
04/19/2016 09:07:40: SGD: Saving checkpoint model '/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn.4'

04/19/2016 09:07:40: Starting Epoch 5: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/19/2016 09:07:40: Starting minibatch loop.
04/19/2016 09:07:41:  Epoch[ 5 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.34117630; EvalErr[0]PerSample = 0.89000000; TotalTime = 0.8190s; SamplesPerSecond = 122.1
04/19/2016 09:07:41: Finished Epoch[ 5 of 12]: [Training Set] TrainLossPerSample = 2.3411763; TotalSamplesSeen = 500; EvalErrPerSample = 0.89; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.819517
04/19/2016 09:07:41: SGD: Saving checkpoint model '/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn.5'

04/19/2016 09:07:41: Starting Epoch 6: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/19/2016 09:07:41: Starting minibatch loop.
04/19/2016 09:07:42:  Epoch[ 6 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.29134598; EvalErr[0]PerSample = 0.87000000; TotalTime = 0.7659s; SamplesPerSecond = 130.6
04/19/2016 09:07:42: Finished Epoch[ 6 of 12]: [Training Set] TrainLossPerSample = 2.291346; TotalSamplesSeen = 600; EvalErrPerSample = 0.87; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.766334
04/19/2016 09:07:42: SGD: Saving checkpoint model '/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn.6'

04/19/2016 09:07:42: Starting Epoch 7: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/19/2016 09:07:42: Starting minibatch loop.
04/19/2016 09:07:42:  Epoch[ 7 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.26332016; EvalErr[0]PerSample = 0.86000000; TotalTime = 0.6345s; SamplesPerSecond = 157.6
04/19/2016 09:07:42: Finished Epoch[ 7 of 12]: [Training Set] TrainLossPerSample = 2.2633202; TotalSamplesSeen = 700; EvalErrPerSample = 0.86; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.6349
04/19/2016 09:07:42: SGD: Saving checkpoint model '/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn.7'

04/19/2016 09:07:42: Starting Epoch 8: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/19/2016 09:07:42: Starting minibatch loop.
04/19/2016 09:07:43:  Epoch[ 8 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  2.21812775; EvalErr[0]PerSample = 0.86000000; TotalTime = 1.0491s; SamplesPerSecond = 95.3
04/19/2016 09:07:43: Finished Epoch[ 8 of 12]: [Training Set] TrainLossPerSample = 2.2181277; TotalSamplesSeen = 800; EvalErrPerSample = 0.86; AvgLearningRatePerSample = 0.0049999999; EpochTime=1.04937
04/19/2016 09:07:43: SGD: Saving checkpoint model '/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn.8'

04/19/2016 09:07:43: Starting Epoch 9: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/19/2016 09:07:43: Starting minibatch loop.
04/19/2016 09:07:44:  Epoch[ 9 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  1.96541580; EvalErr[0]PerSample = 0.67000000; TotalTime = 0.8240s; SamplesPerSecond = 121.4
04/19/2016 09:07:44: Finished Epoch[ 9 of 12]: [Training Set] TrainLossPerSample = 1.9654158; TotalSamplesSeen = 900; EvalErrPerSample = 0.67; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.824313
04/19/2016 09:07:44: SGD: Saving checkpoint model '/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn.9'

04/19/2016 09:07:44: Starting Epoch 10: learning rate per sample = 0.005000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/19/2016 09:07:44: Starting minibatch loop.
04/19/2016 09:07:45:  Epoch[10 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  1.79804520; EvalErr[0]PerSample = 0.49000000; TotalTime = 0.9223s; SamplesPerSecond = 108.4
04/19/2016 09:07:45: Finished Epoch[10 of 12]: [Training Set] TrainLossPerSample = 1.7980452; TotalSamplesSeen = 1000; EvalErrPerSample = 0.49; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.922551
04/19/2016 09:07:45: SGD: Saving checkpoint model '/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn.10'

04/19/2016 09:07:45: Starting Epoch 11: learning rate per sample = 0.005000  effective momentum = 0.700000  momentum as time constant = 28.0 samples

04/19/2016 09:07:45: Starting minibatch loop.
04/19/2016 09:07:46:  Epoch[11 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  1.63733383; EvalErr[0]PerSample = 0.45000000; TotalTime = 0.8257s; SamplesPerSecond = 121.1
04/19/2016 09:07:46: Finished Epoch[11 of 12]: [Training Set] TrainLossPerSample = 1.6373338; TotalSamplesSeen = 1100; EvalErrPerSample = 0.45; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.825872
04/19/2016 09:07:46: SGD: Saving checkpoint model '/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn.11'

04/19/2016 09:07:46: Starting Epoch 12: learning rate per sample = 0.005000  effective momentum = 0.700000  momentum as time constant = 28.0 samples

04/19/2016 09:07:46: Starting minibatch loop.
04/19/2016 09:07:47:  Epoch[12 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  1.30534378; EvalErr[0]PerSample = 0.07000000; TotalTime = 0.7935s; SamplesPerSecond = 126.0
04/19/2016 09:07:47: Finished Epoch[12 of 12]: [Training Set] TrainLossPerSample = 1.3053438; TotalSamplesSeen = 1200; EvalErrPerSample = 0.07; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.79366
04/19/2016 09:07:47: SGD: Saving checkpoint model '/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn'
04/19/2016 09:07:47: CNTKCommandTrainEnd: train

04/19/2016 09:07:47: Action "train" complete.


04/19/2016 09:07:47: ##############################################################################
04/19/2016 09:07:47: #                                                                            #
04/19/2016 09:07:47: # Action "test"                                                              #
04/19/2016 09:07:47: #                                                                            #
04/19/2016 09:07:47: ##############################################################################


Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 4 x 4 x 32]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [24 x 24 x 16 x *1]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *1], [1 x 1 x 16] -> [24 x 24 x 16 x *1]
Validating --> conv1_act.out = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *1] -> [24 x 24 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1_act.out) : [24 x 24 x 16 x *1] -> [12 x 12 x 16 x *1]
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *1] -> [8 x 8 x 32 x *1]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *1], [1 x 1 x 32] -> [8 x 8 x 32 x *1]
Validating --> conv2_act.out = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *1] -> [8 x 8 x 32 x *1]
Validating --> pool2 = AveragePooling (conv2_act.out) : [8 x 8 x 32 x *1] -> [4 x 4 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 4 x 4 x 32], [4 x 4 x 32 x *1] -> [128 x *1]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *1], [128] -> [128 x *1]
Validating --> h1.out = Sigmoid (h1.z) : [128 x *1] -> [128 x *1]
Validating --> ol.t = Times (ol.W, h1.out) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.out = Plus (ol.t, ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.out) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> err = ErrorPrediction (labels, ol.out) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


Using reference convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.
Final Results: Minibatch[1-1]: SamplesSeen = 100    err: ErrorPrediction/Sample = 0.1    ce: CrossEntropyWithSoftmax/Sample = 1.1316898    Perplexity = 3.1008918    

04/19/2016 09:07:47: Action "test" complete.

04/19/2016 09:07:47: __COMPLETED__
=== Deleting last epoch data
==== Re-running from checkpoint
=== Running /home/alrezni/src/cntk_git/build/release/bin/cntk configFile=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/cntk.cntk currentDirectory=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E RunDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu DataDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E OutputDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu DeviceId=-1 timestamping=true makeMode=true
-------------------------------------------------------------------
Build info: 

		Built time: Apr 18 2016 16:16:45
		Last modified date: Tue Apr  5 16:01:37 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: alrezni/examples_text
		Build SHA1: 3f7e6e78467f3e03a6cbd014c30e36a5711575df (modified)
		Built by alrezni on atleneu04
		Build Path: /home/alrezni/src/cntk_git
-------------------------------------------------------------------
Changed current directory to /home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
04/19/2016 09:07:48: -------------------------------------------------------------------
04/19/2016 09:07:48: Build info: 

04/19/2016 09:07:48: 		Built time: Apr 18 2016 16:16:45
04/19/2016 09:07:48: 		Last modified date: Tue Apr  5 16:01:37 2016
04/19/2016 09:07:48: 		Build type: release
04/19/2016 09:07:48: 		Build target: GPU
04/19/2016 09:07:48: 		With 1bit-SGD: no
04/19/2016 09:07:48: 		Math lib: acml
04/19/2016 09:07:48: 		CUDA_PATH: /usr/local/cuda-7.0
04/19/2016 09:07:48: 		CUB_PATH: /usr/local/cub-1.4.1
04/19/2016 09:07:48: 		CUDNN_PATH: /usr/local/cudnn-4.0
04/19/2016 09:07:48: 		Build Branch: alrezni/examples_text
04/19/2016 09:07:48: 		Build SHA1: 3f7e6e78467f3e03a6cbd014c30e36a5711575df (modified)
04/19/2016 09:07:48: 		Built by alrezni on atleneu04
04/19/2016 09:07:48: 		Build Path: /home/alrezni/src/cntk_git
04/19/2016 09:07:48: -------------------------------------------------------------------

04/19/2016 09:07:48: Running on localhost at 2016/04/19 09:07:48
04/19/2016 09:07:48: Command line: 
/home/alrezni/src/cntk_git/build/release/bin/cntk  configFile=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/cntk.cntk  currentDirectory=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E  RunDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu  DataDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E  ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E  OutputDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu  DeviceId=-1  timestamping=true  makeMode=true



04/19/2016 09:07:48: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/19/2016 09:07:48: precision = "float"
command = train:test
deviceId = $DeviceId$
ndlMacros = "$ConfigDir$/Macros.ndl"
parallelTrain = false
numCPUThreads = 8
train = [
    action = "train"
    modelPath = "$RunDir$/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=false)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = Plus(conv, convB);
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            t = Times(W, x)
            z = Plus(t, b)
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            t = Times(W, x)
            out = Plus(t, b)
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, 25, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, 400, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
        outputNodes = ol
    ]
    SGD = [
        epochSize = 100
        minibatchSize = 10
        learningRatesPerMB = 0.05
        momentumPerMB = 0*10:0.7
        maxEpochs = 12
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
		input = [
			features = [
				dim = 784
				format = "dense"
			]
			labels = [
				dim = 10
				format = "dense"
			]
		]
    ]    
]
test = [
    action = "test"
    modelPath = "$RunDir$/models/cntk.dnn"
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/Convolution.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
		input = [
			features = [
				dim = 784
				format = "dense"
			]
			labels = [
				dim = 10
				format = "dense"
			]
		]
    ]    
]
currentDirectory=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
RunDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu
DataDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
OutputDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu
DeviceId=-1
timestamping=true
makeMode=true

04/19/2016 09:07:48: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/19/2016 09:07:48: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/19/2016 09:07:48: precision = "float"
command = train:test
deviceId = -1
ndlMacros = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Macros.ndl"
parallelTrain = false
numCPUThreads = 8
train = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=false)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = Plus(conv, convB);
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            t = Times(W, x)
            z = Plus(t, b)
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            t = Times(W, x)
            out = Plus(t, b)
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, 25, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, 400, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
        outputNodes = ol
    ]
    SGD = [
        epochSize = 100
        minibatchSize = 10
        learningRatesPerMB = 0.05
        momentumPerMB = 0*10:0.7
        maxEpochs = 12
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Train_cntk_text.txt"
		input = [
			features = [
				dim = 784
				format = "dense"
			]
			labels = [
				dim = 10
				format = "dense"
			]
		]
    ]    
]
test = [
    action = "test"
    modelPath = "/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn"
    NDLNetworkBuilder = [
        networkDescription = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Convolution.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Test_cntk_text.txt"
		input = [
			features = [
				dim = 784
				format = "dense"
			]
			labels = [
				dim = 10
				format = "dense"
			]
		]
    ]    
]
currentDirectory=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
RunDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu
DataDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
OutputDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu
DeviceId=-1
timestamping=true
makeMode=true

04/19/2016 09:07:48: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/19/2016 09:07:48: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=train:test
configparameters: cntk.cntk:ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
configparameters: cntk.cntk:currentDirectory=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
configparameters: cntk.cntk:DataDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:makeMode=true
configparameters: cntk.cntk:ndlMacros=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Macros.ndl
configparameters: cntk.cntk:numCPUThreads=8
configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu
configparameters: cntk.cntk:test=[
    action = "test"
    modelPath = "/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn"
    NDLNetworkBuilder = [
        networkDescription = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Convolution.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Test_cntk_text.txt"
		input = [
			features = [
				dim = 784
				format = "dense"
			]
			labels = [
				dim = 10
				format = "dense"
			]
		]
    ]    
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:train=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn"
    traceLevel = 1
    BrainScriptNetworkBuilder = [
        // HACK to enforce same evaluation order or LearnableParameters as for NDL, as to get same radomization
        // Nodes are evaluated in sorting order.
        A1 = conv1_act; A2 = conv2_act; A3 = h1 ; A5 = ol
        // macros
        ConvReLULayer(inp, outMap, inMap, inWCount, kW, kH, hStride, vStride, wScale, bValue) = [  // ReLU non-linearity
            convW = Parameter(outMap, inWCount, init="uniform", initValueScale=wScale, initOnCPUOnly=false)
            conv = Convolution(convW, inp, (kW : kH : inMap), mapDims=outMap, stride=(hStride : vStride : inMap), autoPadding=false, imageLayout="cudnn")
            convB = ParameterTensor((1 : 1 : outMap), init="fixedValue", value=bValue)
            convPlusB = Plus(conv, convB);
            out = RectifiedLinear(convPlusB);
        ]
        DNNSigmoidLayer(inDim, outDim, x, parmScale) = [        // Sigmoid non-linearity
            W = ParameterTensor((outDim : inDim), init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            b = ParameterTensor( outDim,          init="uniform", initValueScale=parmScale, initOnCPUOnly=false) 
            t = Times(W, x)
            z = Plus(t, b)
            out = Sigmoid(z)
        ]
        DNNLayer(inDim, outDim, x, parmScale) = [               // no non-linearity, as input for SoftMax
            W = Parameter(outDim, inDim, init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            b = Parameter(outDim, 1,     init="uniform", initValueScale=parmScale, initOnCPUOnly=false)
            t = Times(W, x)
            out = Plus(t, b)
        ]
        imageW = 28
        imageH = 28
        labelDim = 10
        features = ImageInput(imageW, imageH, 1, imageLayout="cudnn", tag="feature")
        featScale = Constant(0.00390625)
        featScaled = Scale(featScale, features)
        labels = Input(labelDim, tag="label")
        kW1 = 5
        kH1 = 5
        cMap1 = 16
        hStride1 = 1
        vStride1 = 1
        conv1_act = ConvReLULayer(featScaled, cMap1, 1, 25, kW1, kH1, hStride1, vStride1, 10, 1).out
        pool1W = 2
        pool1H = 2
        pool1hStride = 2
        pool1vStride = 2
        pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout="cudnn")
        kW2 = 5
        kH2 = 5
        cMap2 = 32
        hStride2 = 1
        vStride2 = 1
        conv2_act = ConvReLULayer(pool1, cMap2, cMap1, 400, kW2, kH2, hStride2, vStride2, 10, 1).out
        pool2W = 2
        pool2H = 2
        pool2hStride = 2
        pool2vStride = 2
        pool2 = AveragePooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout="cudnn")
        h1Dim = 128
        h1 = DNNSigmoidLayer((4 : 4 : cMap2/*cudnn: CHW*/), h1Dim, pool2, 1).out
        ol = DNNLayer(h1Dim, labelDim, h1, 1).out
        ce = CrossEntropyWithSoftmax(labels, ol, tag="criterion")
        err = ErrorPrediction(labels, ol, tag="evaluation")
        outputNodes = ol
    ]
    SGD = [
        epochSize = 100
        minibatchSize = 10
        learningRatesPerMB = 0.05
        momentumPerMB = 0*10:0.7
        maxEpochs = 12
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Image/QuickE2E/Train_cntk_text.txt"
		input = [
			features = [
				dim = 784
				format = "dense"
			]
			labels = [
				dim = 10
				format = "dense"
			]
		]
    ]    
]

04/19/2016 09:07:48: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/19/2016 09:07:48: Commands: train test
04/19/2016 09:07:48: Precision = "float"
04/19/2016 09:07:48: Using 8 CPU threads.
04/19/2016 09:07:48: CNTKModelPath: /tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn
04/19/2016 09:07:48: CNTKCommandTrainInfo: train : 12
04/19/2016 09:07:48: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 12

04/19/2016 09:07:48: ##############################################################################
04/19/2016 09:07:48: #                                                                            #
04/19/2016 09:07:48: # Action "train"                                                             #
04/19/2016 09:07:48: #                                                                            #
04/19/2016 09:07:48: ##############################################################################

04/19/2016 09:07:48: CNTKCommandTrainBegin: train

04/19/2016 09:07:48: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn.11'.

Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 4 x 4 x 32]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [24 x 24 x 16 x *]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *], [1 x 1 x 16] -> [24 x 24 x 16 x *]
Validating --> conv1_act.out = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *] -> [24 x 24 x 16 x *]
Validating --> pool1 = MaxPooling (conv1_act.out) : [24 x 24 x 16 x *] -> [12 x 12 x 16 x *]
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *] -> [8 x 8 x 32 x *]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *], [1 x 1 x 32] -> [8 x 8 x 32 x *]
Validating --> conv2_act.out = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *] -> [8 x 8 x 32 x *]
Validating --> pool2 = AveragePooling (conv2_act.out) : [8 x 8 x 32 x *] -> [4 x 4 x 32 x *]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 4 x 4 x 32], [4 x 4 x 32 x *] -> [128 x *]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *], [128] -> [128 x *]
Validating --> h1.out = Sigmoid (h1.z) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.out) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.out = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.out) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


Using reference convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/19/2016 09:07:48: Loaded model with 27 nodes on CPU.

04/19/2016 09:07:48: Training criterion node(s):
04/19/2016 09:07:48: 	ce = CrossEntropyWithSoftmax

04/19/2016 09:07:48: Evaluation criterion node(s):

04/19/2016 09:07:48: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.
04/19/2016 09:07:48: No PreCompute nodes found, skipping PreCompute step.
04/19/2016 09:07:48: Warning: Checkpoint file is missing. Learning parameters will be initialized from 0

04/19/2016 09:07:48: Starting Epoch 12: learning rate per sample = 0.005000  effective momentum = 0.700000  momentum as time constant = 28.0 samples

04/19/2016 09:07:48: Starting minibatch loop.
04/19/2016 09:07:49:  Epoch[12 of 12]-Minibatch[   1-  10, 100.00%]: SamplesSeen = 100; TrainLossPerSample =  1.33829681; EvalErr[0]PerSample = 0.07000000; TotalTime = 0.9042s; SamplesPerSecond = 110.6
04/19/2016 09:07:49: Finished Epoch[12 of 12]: [Training Set] TrainLossPerSample = 1.3382968; TotalSamplesSeen = 100; EvalErrPerSample = 0.07; AvgLearningRatePerSample = 0.0049999999; EpochTime=0.904746
04/19/2016 09:07:49: SGD: Saving checkpoint model '/tmp/cntk-test-20160419090735.280944/CNTKTextFormatReader/Image_QuickE2E@release_cpu/models/cntk.dnn'
04/19/2016 09:07:49: CNTKCommandTrainEnd: train

04/19/2016 09:07:49: Action "train" complete.


04/19/2016 09:07:49: ##############################################################################
04/19/2016 09:07:49: #                                                                            #
04/19/2016 09:07:49: # Action "test"                                                              #
04/19/2016 09:07:49: #                                                                            #
04/19/2016 09:07:49: ##############################################################################


Post-processing network...

2 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 4 x 4 x 32]
Validating --> conv2_act.convW = LearnableParameter() :  -> [32 x 400]
Validating --> conv1_act.convW = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1_act.conv = Convolution (conv1_act.convW, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [24 x 24 x 16 x *1]
Validating --> conv1_act.convB = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1_act.convPlusB = Plus (conv1_act.conv, conv1_act.convB) : [24 x 24 x 16 x *1], [1 x 1 x 16] -> [24 x 24 x 16 x *1]
Validating --> conv1_act.out = RectifiedLinear (conv1_act.convPlusB) : [24 x 24 x 16 x *1] -> [24 x 24 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1_act.out) : [24 x 24 x 16 x *1] -> [12 x 12 x 16 x *1]
Validating --> conv2_act.conv = Convolution (conv2_act.convW, pool1) : [32 x 400], [12 x 12 x 16 x *1] -> [8 x 8 x 32 x *1]
Validating --> conv2_act.convB = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2_act.convPlusB = Plus (conv2_act.conv, conv2_act.convB) : [8 x 8 x 32 x *1], [1 x 1 x 32] -> [8 x 8 x 32 x *1]
Validating --> conv2_act.out = RectifiedLinear (conv2_act.convPlusB) : [8 x 8 x 32 x *1] -> [8 x 8 x 32 x *1]
Validating --> pool2 = AveragePooling (conv2_act.out) : [8 x 8 x 32 x *1] -> [4 x 4 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 4 x 4 x 32], [4 x 4 x 32 x *1] -> [128 x *1]
Validating --> h1.b = LearnableParameter() :  -> [128]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *1], [128] -> [128 x *1]
Validating --> h1.out = Sigmoid (h1.z) : [128 x *1] -> [128 x *1]
Validating --> ol.t = Times (ol.W, h1.out) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.out = Plus (ol.t, ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.out) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> err = ErrorPrediction (labels, ol.out) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


Using reference convolution engine for geometry: Input: 28 x 28 x 1, Output: 24 x 24 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 24 x 24 x 16, Output: 12 x 12 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 12 x 12 x 16, Output: 8 x 8 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 8 x 8 x 32, Output: 4 x 4 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.
Final Results: Minibatch[1-1]: SamplesSeen = 100    err: ErrorPrediction/Sample = 0.1    ce: CrossEntropyWithSoftmax/Sample = 1.1834083    Perplexity = 3.2654849    

04/19/2016 09:07:49: Action "test" complete.

04/19/2016 09:07:49: __COMPLETED__